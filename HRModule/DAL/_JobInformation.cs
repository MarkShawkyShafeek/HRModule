
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace HRModuleEntity
{
	public abstract class _JobInformation : SqlClientEntity
	{
		public _JobInformation()
		{
			this.QuerySource = "JobInformation";
			this.MappingName = "JobInformation";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JobInformationLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(long ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_JobInformationLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter EmpID
			{
				get
				{
					return new SqlParameter("@EmpID", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter BranchID
			{
				get
				{
					return new SqlParameter("@BranchID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter DepartmentID
			{
				get
				{
					return new SqlParameter("@DepartmentID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TeamID
			{
				get
				{
					return new SqlParameter("@TeamID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter JobTitleID
			{
				get
				{
					return new SqlParameter("@JobTitleID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyEmail
			{
				get
				{
					return new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CompanyLandline
			{
				get
				{
					return new SqlParameter("@CompanyLandline", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CompanyMobile
			{
				get
				{
					return new SqlParameter("@CompanyMobile", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CompanyFax
			{
				get
				{
					return new SqlParameter("@CompanyFax", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter CreationDate
			{
				get
				{
					return new SqlParameter("@CreationDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter ModifiedDate
			{
				get
				{
					return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter FromDate
			{
				get
				{
					return new SqlParameter("@FromDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter EndDate
			{
				get
				{
					return new SqlParameter("@EndDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter IsCurrent
			{
				get
				{
					return new SqlParameter("@IsCurrent", SqlDbType.Bit, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string EmpID = "EmpID";
            public const string BranchID = "BranchID";
            public const string DepartmentID = "DepartmentID";
            public const string TeamID = "TeamID";
            public const string JobTitleID = "JobTitleID";
            public const string CompanyEmail = "CompanyEmail";
            public const string CompanyLandline = "CompanyLandline";
            public const string CompanyMobile = "CompanyMobile";
            public const string CompanyFax = "CompanyFax";
            public const string CreationDate = "CreationDate";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string FromDate = "FromDate";
            public const string EndDate = "EndDate";
            public const string IsCurrent = "IsCurrent";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _JobInformation.PropertyNames.ID;
					ht[EmpID] = _JobInformation.PropertyNames.EmpID;
					ht[BranchID] = _JobInformation.PropertyNames.BranchID;
					ht[DepartmentID] = _JobInformation.PropertyNames.DepartmentID;
					ht[TeamID] = _JobInformation.PropertyNames.TeamID;
					ht[JobTitleID] = _JobInformation.PropertyNames.JobTitleID;
					ht[CompanyEmail] = _JobInformation.PropertyNames.CompanyEmail;
					ht[CompanyLandline] = _JobInformation.PropertyNames.CompanyLandline;
					ht[CompanyMobile] = _JobInformation.PropertyNames.CompanyMobile;
					ht[CompanyFax] = _JobInformation.PropertyNames.CompanyFax;
					ht[CreationDate] = _JobInformation.PropertyNames.CreationDate;
					ht[CreatedBy] = _JobInformation.PropertyNames.CreatedBy;
					ht[ModifiedDate] = _JobInformation.PropertyNames.ModifiedDate;
					ht[ModifiedBy] = _JobInformation.PropertyNames.ModifiedBy;
					ht[FromDate] = _JobInformation.PropertyNames.FromDate;
					ht[EndDate] = _JobInformation.PropertyNames.EndDate;
					ht[IsCurrent] = _JobInformation.PropertyNames.IsCurrent;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string EmpID = "EmpID";
            public const string BranchID = "BranchID";
            public const string DepartmentID = "DepartmentID";
            public const string TeamID = "TeamID";
            public const string JobTitleID = "JobTitleID";
            public const string CompanyEmail = "CompanyEmail";
            public const string CompanyLandline = "CompanyLandline";
            public const string CompanyMobile = "CompanyMobile";
            public const string CompanyFax = "CompanyFax";
            public const string CreationDate = "CreationDate";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string FromDate = "FromDate";
            public const string EndDate = "EndDate";
            public const string IsCurrent = "IsCurrent";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _JobInformation.ColumnNames.ID;
					ht[EmpID] = _JobInformation.ColumnNames.EmpID;
					ht[BranchID] = _JobInformation.ColumnNames.BranchID;
					ht[DepartmentID] = _JobInformation.ColumnNames.DepartmentID;
					ht[TeamID] = _JobInformation.ColumnNames.TeamID;
					ht[JobTitleID] = _JobInformation.ColumnNames.JobTitleID;
					ht[CompanyEmail] = _JobInformation.ColumnNames.CompanyEmail;
					ht[CompanyLandline] = _JobInformation.ColumnNames.CompanyLandline;
					ht[CompanyMobile] = _JobInformation.ColumnNames.CompanyMobile;
					ht[CompanyFax] = _JobInformation.ColumnNames.CompanyFax;
					ht[CreationDate] = _JobInformation.ColumnNames.CreationDate;
					ht[CreatedBy] = _JobInformation.ColumnNames.CreatedBy;
					ht[ModifiedDate] = _JobInformation.ColumnNames.ModifiedDate;
					ht[ModifiedBy] = _JobInformation.ColumnNames.ModifiedBy;
					ht[FromDate] = _JobInformation.ColumnNames.FromDate;
					ht[EndDate] = _JobInformation.ColumnNames.EndDate;
					ht[IsCurrent] = _JobInformation.ColumnNames.IsCurrent;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string EmpID = "s_EmpID";
            public const string BranchID = "s_BranchID";
            public const string DepartmentID = "s_DepartmentID";
            public const string TeamID = "s_TeamID";
            public const string JobTitleID = "s_JobTitleID";
            public const string CompanyEmail = "s_CompanyEmail";
            public const string CompanyLandline = "s_CompanyLandline";
            public const string CompanyMobile = "s_CompanyMobile";
            public const string CompanyFax = "s_CompanyFax";
            public const string CreationDate = "s_CreationDate";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string FromDate = "s_FromDate";
            public const string EndDate = "s_EndDate";
            public const string IsCurrent = "s_IsCurrent";

		}
		#endregion		
		
		#region Properties
	
		public virtual long ID
	    {
			get
	        {
				return base.Getlong(ColumnNames.ID);
			}
			set
	        {
				base.Setlong(ColumnNames.ID, value);
			}
		}

		public virtual long EmpID
	    {
			get
	        {
				return base.Getlong(ColumnNames.EmpID);
			}
			set
	        {
				base.Setlong(ColumnNames.EmpID, value);
			}
		}

		public virtual int BranchID
	    {
			get
	        {
				return base.Getint(ColumnNames.BranchID);
			}
			set
	        {
				base.Setint(ColumnNames.BranchID, value);
			}
		}

		public virtual int DepartmentID
	    {
			get
	        {
				return base.Getint(ColumnNames.DepartmentID);
			}
			set
	        {
				base.Setint(ColumnNames.DepartmentID, value);
			}
		}

		public virtual int TeamID
	    {
			get
	        {
				return base.Getint(ColumnNames.TeamID);
			}
			set
	        {
				base.Setint(ColumnNames.TeamID, value);
			}
		}

		public virtual int JobTitleID
	    {
			get
	        {
				return base.Getint(ColumnNames.JobTitleID);
			}
			set
	        {
				base.Setint(ColumnNames.JobTitleID, value);
			}
		}

		public virtual string CompanyEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyEmail, value);
			}
		}

		public virtual string CompanyLandline
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyLandline);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyLandline, value);
			}
		}

		public virtual string CompanyMobile
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyMobile);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyMobile, value);
			}
		}

		public virtual string CompanyFax
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyFax);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyFax, value);
			}
		}

		public virtual DateTime CreationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreationDate, value);
			}
		}

		public virtual long CreatedBy
	    {
			get
	        {
				return base.Getlong(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setlong(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime ModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual long ModifiedBy
	    {
			get
	        {
				return base.Getlong(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.Setlong(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual DateTime FromDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.FromDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.FromDate, value);
			}
		}

		public virtual DateTime EndDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.EndDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.EndDate, value);
			}
		}

		public virtual bool IsCurrent
	    {
			get
	        {
				return base.Getbool(ColumnNames.IsCurrent);
			}
			set
	        {
				base.Setbool(ColumnNames.IsCurrent, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetlongAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetlongAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_EmpID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EmpID) ? string.Empty : base.GetlongAsString(ColumnNames.EmpID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EmpID);
				else
					this.EmpID = base.SetlongAsString(ColumnNames.EmpID, value);
			}
		}

		public virtual string s_BranchID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BranchID) ? string.Empty : base.GetintAsString(ColumnNames.BranchID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BranchID);
				else
					this.BranchID = base.SetintAsString(ColumnNames.BranchID, value);
			}
		}

		public virtual string s_DepartmentID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DepartmentID) ? string.Empty : base.GetintAsString(ColumnNames.DepartmentID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DepartmentID);
				else
					this.DepartmentID = base.SetintAsString(ColumnNames.DepartmentID, value);
			}
		}

		public virtual string s_TeamID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TeamID) ? string.Empty : base.GetintAsString(ColumnNames.TeamID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TeamID);
				else
					this.TeamID = base.SetintAsString(ColumnNames.TeamID, value);
			}
		}

		public virtual string s_JobTitleID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitleID) ? string.Empty : base.GetintAsString(ColumnNames.JobTitleID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitleID);
				else
					this.JobTitleID = base.SetintAsString(ColumnNames.JobTitleID, value);
			}
		}

		public virtual string s_CompanyEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyEmail) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyEmail);
				else
					this.CompanyEmail = base.SetstringAsString(ColumnNames.CompanyEmail, value);
			}
		}

		public virtual string s_CompanyLandline
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyLandline) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyLandline);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyLandline);
				else
					this.CompanyLandline = base.SetstringAsString(ColumnNames.CompanyLandline, value);
			}
		}

		public virtual string s_CompanyMobile
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyMobile) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyMobile);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyMobile);
				else
					this.CompanyMobile = base.SetstringAsString(ColumnNames.CompanyMobile, value);
			}
		}

		public virtual string s_CompanyFax
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyFax) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyFax);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyFax);
				else
					this.CompanyFax = base.SetstringAsString(ColumnNames.CompanyFax, value);
			}
		}

		public virtual string s_CreationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreationDate);
				else
					this.CreationDate = base.SetDateTimeAsString(ColumnNames.CreationDate, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetlongAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetlongAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedDate);
				else
					this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetlongAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetlongAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_FromDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FromDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.FromDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FromDate);
				else
					this.FromDate = base.SetDateTimeAsString(ColumnNames.FromDate, value);
			}
		}

		public virtual string s_EndDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.EndDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.EndDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.EndDate);
				else
					this.EndDate = base.SetDateTimeAsString(ColumnNames.EndDate, value);
			}
		}

		public virtual string s_IsCurrent
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IsCurrent) ? string.Empty : base.GetboolAsString(ColumnNames.IsCurrent);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IsCurrent);
				else
					this.IsCurrent = base.SetboolAsString(ColumnNames.IsCurrent, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EmpID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EmpID, Parameters.EmpID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BranchID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DepartmentID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TeamID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TeamID, Parameters.TeamID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitleID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitleID, Parameters.JobTitleID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyEmail, Parameters.CompanyEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyLandline
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyLandline, Parameters.CompanyLandline);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyMobile
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyMobile, Parameters.CompanyMobile);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyFax
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyFax, Parameters.CompanyFax);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FromDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter EndDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IsCurrent
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IsCurrent, Parameters.IsCurrent);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter EmpID
		    {
				get
		        {
					if(_EmpID_W == null)
	        	    {
						_EmpID_W = TearOff.EmpID;
					}
					return _EmpID_W;
				}
			}

			public WhereParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public WhereParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public WhereParameter TeamID
		    {
				get
		        {
					if(_TeamID_W == null)
	        	    {
						_TeamID_W = TearOff.TeamID;
					}
					return _TeamID_W;
				}
			}

			public WhereParameter JobTitleID
		    {
				get
		        {
					if(_JobTitleID_W == null)
	        	    {
						_JobTitleID_W = TearOff.JobTitleID;
					}
					return _JobTitleID_W;
				}
			}

			public WhereParameter CompanyEmail
		    {
				get
		        {
					if(_CompanyEmail_W == null)
	        	    {
						_CompanyEmail_W = TearOff.CompanyEmail;
					}
					return _CompanyEmail_W;
				}
			}

			public WhereParameter CompanyLandline
		    {
				get
		        {
					if(_CompanyLandline_W == null)
	        	    {
						_CompanyLandline_W = TearOff.CompanyLandline;
					}
					return _CompanyLandline_W;
				}
			}

			public WhereParameter CompanyMobile
		    {
				get
		        {
					if(_CompanyMobile_W == null)
	        	    {
						_CompanyMobile_W = TearOff.CompanyMobile;
					}
					return _CompanyMobile_W;
				}
			}

			public WhereParameter CompanyFax
		    {
				get
		        {
					if(_CompanyFax_W == null)
	        	    {
						_CompanyFax_W = TearOff.CompanyFax;
					}
					return _CompanyFax_W;
				}
			}

			public WhereParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public WhereParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public WhereParameter IsCurrent
		    {
				get
		        {
					if(_IsCurrent_W == null)
	        	    {
						_IsCurrent_W = TearOff.IsCurrent;
					}
					return _IsCurrent_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _EmpID_W = null;
			private WhereParameter _BranchID_W = null;
			private WhereParameter _DepartmentID_W = null;
			private WhereParameter _TeamID_W = null;
			private WhereParameter _JobTitleID_W = null;
			private WhereParameter _CompanyEmail_W = null;
			private WhereParameter _CompanyLandline_W = null;
			private WhereParameter _CompanyMobile_W = null;
			private WhereParameter _CompanyFax_W = null;
			private WhereParameter _CreationDate_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedDate_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _FromDate_W = null;
			private WhereParameter _EndDate_W = null;
			private WhereParameter _IsCurrent_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_EmpID_W = null;
				_BranchID_W = null;
				_DepartmentID_W = null;
				_TeamID_W = null;
				_JobTitleID_W = null;
				_CompanyEmail_W = null;
				_CompanyLandline_W = null;
				_CompanyMobile_W = null;
				_CompanyFax_W = null;
				_CreationDate_W = null;
				_CreatedBy_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_FromDate_W = null;
				_EndDate_W = null;
				_IsCurrent_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EmpID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EmpID, Parameters.EmpID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BranchID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BranchID, Parameters.BranchID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DepartmentID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DepartmentID, Parameters.DepartmentID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TeamID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TeamID, Parameters.TeamID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitleID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitleID, Parameters.JobTitleID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyEmail, Parameters.CompanyEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyLandline
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyLandline, Parameters.CompanyLandline);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyMobile
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyMobile, Parameters.CompanyMobile);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyFax
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyFax, Parameters.CompanyFax);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FromDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FromDate, Parameters.FromDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter EndDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.EndDate, Parameters.EndDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IsCurrent
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IsCurrent, Parameters.IsCurrent);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter EmpID
		    {
				get
		        {
					if(_EmpID_W == null)
	        	    {
						_EmpID_W = TearOff.EmpID;
					}
					return _EmpID_W;
				}
			}

			public AggregateParameter BranchID
		    {
				get
		        {
					if(_BranchID_W == null)
	        	    {
						_BranchID_W = TearOff.BranchID;
					}
					return _BranchID_W;
				}
			}

			public AggregateParameter DepartmentID
		    {
				get
		        {
					if(_DepartmentID_W == null)
	        	    {
						_DepartmentID_W = TearOff.DepartmentID;
					}
					return _DepartmentID_W;
				}
			}

			public AggregateParameter TeamID
		    {
				get
		        {
					if(_TeamID_W == null)
	        	    {
						_TeamID_W = TearOff.TeamID;
					}
					return _TeamID_W;
				}
			}

			public AggregateParameter JobTitleID
		    {
				get
		        {
					if(_JobTitleID_W == null)
	        	    {
						_JobTitleID_W = TearOff.JobTitleID;
					}
					return _JobTitleID_W;
				}
			}

			public AggregateParameter CompanyEmail
		    {
				get
		        {
					if(_CompanyEmail_W == null)
	        	    {
						_CompanyEmail_W = TearOff.CompanyEmail;
					}
					return _CompanyEmail_W;
				}
			}

			public AggregateParameter CompanyLandline
		    {
				get
		        {
					if(_CompanyLandline_W == null)
	        	    {
						_CompanyLandline_W = TearOff.CompanyLandline;
					}
					return _CompanyLandline_W;
				}
			}

			public AggregateParameter CompanyMobile
		    {
				get
		        {
					if(_CompanyMobile_W == null)
	        	    {
						_CompanyMobile_W = TearOff.CompanyMobile;
					}
					return _CompanyMobile_W;
				}
			}

			public AggregateParameter CompanyFax
		    {
				get
		        {
					if(_CompanyFax_W == null)
	        	    {
						_CompanyFax_W = TearOff.CompanyFax;
					}
					return _CompanyFax_W;
				}
			}

			public AggregateParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter FromDate
		    {
				get
		        {
					if(_FromDate_W == null)
	        	    {
						_FromDate_W = TearOff.FromDate;
					}
					return _FromDate_W;
				}
			}

			public AggregateParameter EndDate
		    {
				get
		        {
					if(_EndDate_W == null)
	        	    {
						_EndDate_W = TearOff.EndDate;
					}
					return _EndDate_W;
				}
			}

			public AggregateParameter IsCurrent
		    {
				get
		        {
					if(_IsCurrent_W == null)
	        	    {
						_IsCurrent_W = TearOff.IsCurrent;
					}
					return _IsCurrent_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _EmpID_W = null;
			private AggregateParameter _BranchID_W = null;
			private AggregateParameter _DepartmentID_W = null;
			private AggregateParameter _TeamID_W = null;
			private AggregateParameter _JobTitleID_W = null;
			private AggregateParameter _CompanyEmail_W = null;
			private AggregateParameter _CompanyLandline_W = null;
			private AggregateParameter _CompanyMobile_W = null;
			private AggregateParameter _CompanyFax_W = null;
			private AggregateParameter _CreationDate_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedDate_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _FromDate_W = null;
			private AggregateParameter _EndDate_W = null;
			private AggregateParameter _IsCurrent_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_EmpID_W = null;
				_BranchID_W = null;
				_DepartmentID_W = null;
				_TeamID_W = null;
				_JobTitleID_W = null;
				_CompanyEmail_W = null;
				_CompanyLandline_W = null;
				_CompanyMobile_W = null;
				_CompanyFax_W = null;
				_CreationDate_W = null;
				_CreatedBy_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_FromDate_W = null;
				_EndDate_W = null;
				_IsCurrent_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobInformationInsert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobInformationUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_JobInformationDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EmpID);
			p.SourceColumn = ColumnNames.EmpID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BranchID);
			p.SourceColumn = ColumnNames.BranchID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DepartmentID);
			p.SourceColumn = ColumnNames.DepartmentID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TeamID);
			p.SourceColumn = ColumnNames.TeamID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitleID);
			p.SourceColumn = ColumnNames.JobTitleID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyEmail);
			p.SourceColumn = ColumnNames.CompanyEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyLandline);
			p.SourceColumn = ColumnNames.CompanyLandline;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyMobile);
			p.SourceColumn = ColumnNames.CompanyMobile;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyFax);
			p.SourceColumn = ColumnNames.CompanyFax;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreationDate);
			p.SourceColumn = ColumnNames.CreationDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedDate);
			p.SourceColumn = ColumnNames.ModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FromDate);
			p.SourceColumn = ColumnNames.FromDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.EndDate);
			p.SourceColumn = ColumnNames.EndDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IsCurrent);
			p.SourceColumn = ColumnNames.IsCurrent;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
