
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.2.0.1)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace HRModuleEntity
{
	public abstract class _User : SqlClientEntity
	{
		public _User()
		{
			this.QuerySource = "User";
			this.MappingName = "User";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(long ID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.ID, ID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_UserLoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter ID
			{
				get
				{
					return new SqlParameter("@ID", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter FirstName
			{
				get
				{
					return new SqlParameter("@FirstName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MiddleName
			{
				get
				{
					return new SqlParameter("@MiddleName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter LastName
			{
				get
				{
					return new SqlParameter("@LastName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter FullName
			{
				get
				{
					return new SqlParameter("@FullName", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Password
			{
				get
				{
					return new SqlParameter("@Password", SqlDbType.NVarChar, 250);
				}
			}
			
			public static SqlParameter JobTitle
			{
				get
				{
					return new SqlParameter("@JobTitle", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Photo
			{
				get
				{
					return new SqlParameter("@Photo", SqlDbType.Image, 2147483647);
				}
			}
			
			public static SqlParameter NationalID
			{
				get
				{
					return new SqlParameter("@NationalID", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter MaritalStatus
			{
				get
				{
					return new SqlParameter("@MaritalStatus", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CompanyEmail
			{
				get
				{
					return new SqlParameter("@CompanyEmail", SqlDbType.NVarChar, 100);
				}
			}
			
			public static SqlParameter MilitaryState
			{
				get
				{
					return new SqlParameter("@MilitaryState", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter WorkPhone
			{
				get
				{
					return new SqlParameter("@WorkPhone", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter ReportTo
			{
				get
				{
					return new SqlParameter("@ReportTo", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter CountryID
			{
				get
				{
					return new SqlParameter("@CountryID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter CityID
			{
				get
				{
					return new SqlParameter("@CityID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter RegionID
			{
				get
				{
					return new SqlParameter("@RegionID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter Street
			{
				get
				{
					return new SqlParameter("@Street", SqlDbType.NVarChar, 500);
				}
			}
			
			public static SqlParameter BuildingNumber
			{
				get
				{
					return new SqlParameter("@BuildingNumber", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter Floor
			{
				get
				{
					return new SqlParameter("@Floor", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter AddressDescriotion
			{
				get
				{
					return new SqlParameter("@AddressDescriotion", SqlDbType.NText, 1073741823);
				}
			}
			
			public static SqlParameter CreationDate
			{
				get
				{
					return new SqlParameter("@CreationDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter CreatedBy
			{
				get
				{
					return new SqlParameter("@CreatedBy", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter ModifiedDate
			{
				get
				{
					return new SqlParameter("@ModifiedDate", SqlDbType.DateTime, 0);
				}
			}
			
			public static SqlParameter ModifiedBy
			{
				get
				{
					return new SqlParameter("@ModifiedBy", SqlDbType.BigInt, 0);
				}
			}
			
			public static SqlParameter Gender
			{
				get
				{
					return new SqlParameter("@Gender", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter BasicSalary
			{
				get
				{
					return new SqlParameter("@BasicSalary", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter VariantSalary
			{
				get
				{
					return new SqlParameter("@VariantSalary", SqlDbType.NVarChar, 50);
				}
			}
			
			public static SqlParameter PaymentStrategyID
			{
				get
				{
					return new SqlParameter("@PaymentStrategyID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter PaymentMethodID
			{
				get
				{
					return new SqlParameter("@PaymentMethodID", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TotalGross
			{
				get
				{
					return new SqlParameter("@TotalGross", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter TotalNet
			{
				get
				{
					return new SqlParameter("@TotalNet", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter TotalIncome
			{
				get
				{
					return new SqlParameter("@TotalIncome", SqlDbType.Float, 0);
				}
			}
			
			public static SqlParameter CurrencyID
			{
				get
				{
					return new SqlParameter("@CurrencyID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string ID = "ID";
            public const string FirstName = "FirstName";
            public const string MiddleName = "MiddleName";
            public const string LastName = "LastName";
            public const string FullName = "FullName";
            public const string Password = "Password";
            public const string JobTitle = "JobTitle";
            public const string Photo = "Photo";
            public const string NationalID = "NationalID";
            public const string MaritalStatus = "MaritalStatus";
            public const string CompanyEmail = "CompanyEmail";
            public const string MilitaryState = "MilitaryState";
            public const string WorkPhone = "WorkPhone";
            public const string ReportTo = "ReportTo";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string RegionID = "RegionID";
            public const string Street = "Street";
            public const string BuildingNumber = "BuildingNumber";
            public const string Floor = "Floor";
            public const string AddressDescriotion = "AddressDescriotion";
            public const string CreationDate = "CreationDate";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string Gender = "Gender";
            public const string BasicSalary = "BasicSalary";
            public const string VariantSalary = "VariantSalary";
            public const string PaymentStrategyID = "PaymentStrategyID";
            public const string PaymentMethodID = "PaymentMethodID";
            public const string TotalGross = "TotalGross";
            public const string TotalNet = "TotalNet";
            public const string TotalIncome = "TotalIncome";
            public const string CurrencyID = "CurrencyID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _User.PropertyNames.ID;
					ht[FirstName] = _User.PropertyNames.FirstName;
					ht[MiddleName] = _User.PropertyNames.MiddleName;
					ht[LastName] = _User.PropertyNames.LastName;
					ht[FullName] = _User.PropertyNames.FullName;
					ht[Password] = _User.PropertyNames.Password;
					ht[JobTitle] = _User.PropertyNames.JobTitle;
					ht[Photo] = _User.PropertyNames.Photo;
					ht[NationalID] = _User.PropertyNames.NationalID;
					ht[MaritalStatus] = _User.PropertyNames.MaritalStatus;
					ht[CompanyEmail] = _User.PropertyNames.CompanyEmail;
					ht[MilitaryState] = _User.PropertyNames.MilitaryState;
					ht[WorkPhone] = _User.PropertyNames.WorkPhone;
					ht[ReportTo] = _User.PropertyNames.ReportTo;
					ht[CountryID] = _User.PropertyNames.CountryID;
					ht[CityID] = _User.PropertyNames.CityID;
					ht[RegionID] = _User.PropertyNames.RegionID;
					ht[Street] = _User.PropertyNames.Street;
					ht[BuildingNumber] = _User.PropertyNames.BuildingNumber;
					ht[Floor] = _User.PropertyNames.Floor;
					ht[AddressDescriotion] = _User.PropertyNames.AddressDescriotion;
					ht[CreationDate] = _User.PropertyNames.CreationDate;
					ht[CreatedBy] = _User.PropertyNames.CreatedBy;
					ht[ModifiedDate] = _User.PropertyNames.ModifiedDate;
					ht[ModifiedBy] = _User.PropertyNames.ModifiedBy;
					ht[Gender] = _User.PropertyNames.Gender;
					ht[BasicSalary] = _User.PropertyNames.BasicSalary;
					ht[VariantSalary] = _User.PropertyNames.VariantSalary;
					ht[PaymentStrategyID] = _User.PropertyNames.PaymentStrategyID;
					ht[PaymentMethodID] = _User.PropertyNames.PaymentMethodID;
					ht[TotalGross] = _User.PropertyNames.TotalGross;
					ht[TotalNet] = _User.PropertyNames.TotalNet;
					ht[TotalIncome] = _User.PropertyNames.TotalIncome;
					ht[CurrencyID] = _User.PropertyNames.CurrencyID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string ID = "ID";
            public const string FirstName = "FirstName";
            public const string MiddleName = "MiddleName";
            public const string LastName = "LastName";
            public const string FullName = "FullName";
            public const string Password = "Password";
            public const string JobTitle = "JobTitle";
            public const string Photo = "Photo";
            public const string NationalID = "NationalID";
            public const string MaritalStatus = "MaritalStatus";
            public const string CompanyEmail = "CompanyEmail";
            public const string MilitaryState = "MilitaryState";
            public const string WorkPhone = "WorkPhone";
            public const string ReportTo = "ReportTo";
            public const string CountryID = "CountryID";
            public const string CityID = "CityID";
            public const string RegionID = "RegionID";
            public const string Street = "Street";
            public const string BuildingNumber = "BuildingNumber";
            public const string Floor = "Floor";
            public const string AddressDescriotion = "AddressDescriotion";
            public const string CreationDate = "CreationDate";
            public const string CreatedBy = "CreatedBy";
            public const string ModifiedDate = "ModifiedDate";
            public const string ModifiedBy = "ModifiedBy";
            public const string Gender = "Gender";
            public const string BasicSalary = "BasicSalary";
            public const string VariantSalary = "VariantSalary";
            public const string PaymentStrategyID = "PaymentStrategyID";
            public const string PaymentMethodID = "PaymentMethodID";
            public const string TotalGross = "TotalGross";
            public const string TotalNet = "TotalNet";
            public const string TotalIncome = "TotalIncome";
            public const string CurrencyID = "CurrencyID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[ID] = _User.ColumnNames.ID;
					ht[FirstName] = _User.ColumnNames.FirstName;
					ht[MiddleName] = _User.ColumnNames.MiddleName;
					ht[LastName] = _User.ColumnNames.LastName;
					ht[FullName] = _User.ColumnNames.FullName;
					ht[Password] = _User.ColumnNames.Password;
					ht[JobTitle] = _User.ColumnNames.JobTitle;
					ht[Photo] = _User.ColumnNames.Photo;
					ht[NationalID] = _User.ColumnNames.NationalID;
					ht[MaritalStatus] = _User.ColumnNames.MaritalStatus;
					ht[CompanyEmail] = _User.ColumnNames.CompanyEmail;
					ht[MilitaryState] = _User.ColumnNames.MilitaryState;
					ht[WorkPhone] = _User.ColumnNames.WorkPhone;
					ht[ReportTo] = _User.ColumnNames.ReportTo;
					ht[CountryID] = _User.ColumnNames.CountryID;
					ht[CityID] = _User.ColumnNames.CityID;
					ht[RegionID] = _User.ColumnNames.RegionID;
					ht[Street] = _User.ColumnNames.Street;
					ht[BuildingNumber] = _User.ColumnNames.BuildingNumber;
					ht[Floor] = _User.ColumnNames.Floor;
					ht[AddressDescriotion] = _User.ColumnNames.AddressDescriotion;
					ht[CreationDate] = _User.ColumnNames.CreationDate;
					ht[CreatedBy] = _User.ColumnNames.CreatedBy;
					ht[ModifiedDate] = _User.ColumnNames.ModifiedDate;
					ht[ModifiedBy] = _User.ColumnNames.ModifiedBy;
					ht[Gender] = _User.ColumnNames.Gender;
					ht[BasicSalary] = _User.ColumnNames.BasicSalary;
					ht[VariantSalary] = _User.ColumnNames.VariantSalary;
					ht[PaymentStrategyID] = _User.ColumnNames.PaymentStrategyID;
					ht[PaymentMethodID] = _User.ColumnNames.PaymentMethodID;
					ht[TotalGross] = _User.ColumnNames.TotalGross;
					ht[TotalNet] = _User.ColumnNames.TotalNet;
					ht[TotalIncome] = _User.ColumnNames.TotalIncome;
					ht[CurrencyID] = _User.ColumnNames.CurrencyID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string ID = "s_ID";
            public const string FirstName = "s_FirstName";
            public const string MiddleName = "s_MiddleName";
            public const string LastName = "s_LastName";
            public const string FullName = "s_FullName";
            public const string Password = "s_Password";
            public const string JobTitle = "s_JobTitle";
            public const string NationalID = "s_NationalID";
            public const string MaritalStatus = "s_MaritalStatus";
            public const string CompanyEmail = "s_CompanyEmail";
            public const string MilitaryState = "s_MilitaryState";
            public const string WorkPhone = "s_WorkPhone";
            public const string ReportTo = "s_ReportTo";
            public const string CountryID = "s_CountryID";
            public const string CityID = "s_CityID";
            public const string RegionID = "s_RegionID";
            public const string Street = "s_Street";
            public const string BuildingNumber = "s_BuildingNumber";
            public const string Floor = "s_Floor";
            public const string AddressDescriotion = "s_AddressDescriotion";
            public const string CreationDate = "s_CreationDate";
            public const string CreatedBy = "s_CreatedBy";
            public const string ModifiedDate = "s_ModifiedDate";
            public const string ModifiedBy = "s_ModifiedBy";
            public const string Gender = "s_Gender";
            public const string BasicSalary = "s_BasicSalary";
            public const string VariantSalary = "s_VariantSalary";
            public const string PaymentStrategyID = "s_PaymentStrategyID";
            public const string PaymentMethodID = "s_PaymentMethodID";
            public const string TotalGross = "s_TotalGross";
            public const string TotalNet = "s_TotalNet";
            public const string TotalIncome = "s_TotalIncome";
            public const string CurrencyID = "s_CurrencyID";

		}
		#endregion		
		
		#region Properties
	
		public virtual long ID
	    {
			get
	        {
				return base.Getlong(ColumnNames.ID);
			}
			set
	        {
				base.Setlong(ColumnNames.ID, value);
			}
		}

		public virtual string FirstName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FirstName);
			}
			set
	        {
				base.Setstring(ColumnNames.FirstName, value);
			}
		}

		public virtual string MiddleName
	    {
			get
	        {
				return base.Getstring(ColumnNames.MiddleName);
			}
			set
	        {
				base.Setstring(ColumnNames.MiddleName, value);
			}
		}

		public virtual string LastName
	    {
			get
	        {
				return base.Getstring(ColumnNames.LastName);
			}
			set
	        {
				base.Setstring(ColumnNames.LastName, value);
			}
		}

		public virtual string FullName
	    {
			get
	        {
				return base.Getstring(ColumnNames.FullName);
			}
			set
	        {
				base.Setstring(ColumnNames.FullName, value);
			}
		}

		public virtual string Password
	    {
			get
	        {
				return base.Getstring(ColumnNames.Password);
			}
			set
	        {
				base.Setstring(ColumnNames.Password, value);
			}
		}

		public virtual int JobTitle
	    {
			get
	        {
				return base.Getint(ColumnNames.JobTitle);
			}
			set
	        {
				base.Setint(ColumnNames.JobTitle, value);
			}
		}

		public virtual byte[] Photo
	    {
			get
	        {
				return base.GetByteArray(ColumnNames.Photo);
			}
			set
	        {
				base.SetByteArray(ColumnNames.Photo, value);
			}
		}

		public virtual string NationalID
	    {
			get
	        {
				return base.Getstring(ColumnNames.NationalID);
			}
			set
	        {
				base.Setstring(ColumnNames.NationalID, value);
			}
		}

		public virtual int MaritalStatus
	    {
			get
	        {
				return base.Getint(ColumnNames.MaritalStatus);
			}
			set
	        {
				base.Setint(ColumnNames.MaritalStatus, value);
			}
		}

		public virtual string CompanyEmail
	    {
			get
	        {
				return base.Getstring(ColumnNames.CompanyEmail);
			}
			set
	        {
				base.Setstring(ColumnNames.CompanyEmail, value);
			}
		}

		public virtual int MilitaryState
	    {
			get
	        {
				return base.Getint(ColumnNames.MilitaryState);
			}
			set
	        {
				base.Setint(ColumnNames.MilitaryState, value);
			}
		}

		public virtual long WorkPhone
	    {
			get
	        {
				return base.Getlong(ColumnNames.WorkPhone);
			}
			set
	        {
				base.Setlong(ColumnNames.WorkPhone, value);
			}
		}

		public virtual long ReportTo
	    {
			get
	        {
				return base.Getlong(ColumnNames.ReportTo);
			}
			set
	        {
				base.Setlong(ColumnNames.ReportTo, value);
			}
		}

		public virtual int CountryID
	    {
			get
	        {
				return base.Getint(ColumnNames.CountryID);
			}
			set
	        {
				base.Setint(ColumnNames.CountryID, value);
			}
		}

		public virtual int CityID
	    {
			get
	        {
				return base.Getint(ColumnNames.CityID);
			}
			set
	        {
				base.Setint(ColumnNames.CityID, value);
			}
		}

		public virtual int RegionID
	    {
			get
	        {
				return base.Getint(ColumnNames.RegionID);
			}
			set
	        {
				base.Setint(ColumnNames.RegionID, value);
			}
		}

		public virtual string Street
	    {
			get
	        {
				return base.Getstring(ColumnNames.Street);
			}
			set
	        {
				base.Setstring(ColumnNames.Street, value);
			}
		}

		public virtual string BuildingNumber
	    {
			get
	        {
				return base.Getstring(ColumnNames.BuildingNumber);
			}
			set
	        {
				base.Setstring(ColumnNames.BuildingNumber, value);
			}
		}

		public virtual string Floor
	    {
			get
	        {
				return base.Getstring(ColumnNames.Floor);
			}
			set
	        {
				base.Setstring(ColumnNames.Floor, value);
			}
		}

		public virtual string AddressDescriotion
	    {
			get
	        {
				return base.Getstring(ColumnNames.AddressDescriotion);
			}
			set
	        {
				base.Setstring(ColumnNames.AddressDescriotion, value);
			}
		}

		public virtual DateTime CreationDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.CreationDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.CreationDate, value);
			}
		}

		public virtual long CreatedBy
	    {
			get
	        {
				return base.Getlong(ColumnNames.CreatedBy);
			}
			set
	        {
				base.Setlong(ColumnNames.CreatedBy, value);
			}
		}

		public virtual DateTime ModifiedDate
	    {
			get
	        {
				return base.GetDateTime(ColumnNames.ModifiedDate);
			}
			set
	        {
				base.SetDateTime(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual long ModifiedBy
	    {
			get
	        {
				return base.Getlong(ColumnNames.ModifiedBy);
			}
			set
	        {
				base.Setlong(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string Gender
	    {
			get
	        {
				return base.Getstring(ColumnNames.Gender);
			}
			set
	        {
				base.Setstring(ColumnNames.Gender, value);
			}
		}

		public virtual string BasicSalary
	    {
			get
	        {
				return base.Getstring(ColumnNames.BasicSalary);
			}
			set
	        {
				base.Setstring(ColumnNames.BasicSalary, value);
			}
		}

		public virtual string VariantSalary
	    {
			get
	        {
				return base.Getstring(ColumnNames.VariantSalary);
			}
			set
	        {
				base.Setstring(ColumnNames.VariantSalary, value);
			}
		}

		public virtual int PaymentStrategyID
	    {
			get
	        {
				return base.Getint(ColumnNames.PaymentStrategyID);
			}
			set
	        {
				base.Setint(ColumnNames.PaymentStrategyID, value);
			}
		}

		public virtual int PaymentMethodID
	    {
			get
	        {
				return base.Getint(ColumnNames.PaymentMethodID);
			}
			set
	        {
				base.Setint(ColumnNames.PaymentMethodID, value);
			}
		}

		public virtual double TotalGross
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalGross);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalGross, value);
			}
		}

		public virtual double TotalNet
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalNet);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalNet, value);
			}
		}

		public virtual double TotalIncome
	    {
			get
	        {
				return base.Getdouble(ColumnNames.TotalIncome);
			}
			set
	        {
				base.Setdouble(ColumnNames.TotalIncome, value);
			}
		}

		public virtual int CurrencyID
	    {
			get
	        {
				return base.Getint(ColumnNames.CurrencyID);
			}
			set
	        {
				base.Setint(ColumnNames.CurrencyID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ID) ? string.Empty : base.GetlongAsString(ColumnNames.ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ID);
				else
					this.ID = base.SetlongAsString(ColumnNames.ID, value);
			}
		}

		public virtual string s_FirstName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FirstName) ? string.Empty : base.GetstringAsString(ColumnNames.FirstName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FirstName);
				else
					this.FirstName = base.SetstringAsString(ColumnNames.FirstName, value);
			}
		}

		public virtual string s_MiddleName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MiddleName) ? string.Empty : base.GetstringAsString(ColumnNames.MiddleName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MiddleName);
				else
					this.MiddleName = base.SetstringAsString(ColumnNames.MiddleName, value);
			}
		}

		public virtual string s_LastName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.LastName) ? string.Empty : base.GetstringAsString(ColumnNames.LastName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.LastName);
				else
					this.LastName = base.SetstringAsString(ColumnNames.LastName, value);
			}
		}

		public virtual string s_FullName
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FullName) ? string.Empty : base.GetstringAsString(ColumnNames.FullName);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FullName);
				else
					this.FullName = base.SetstringAsString(ColumnNames.FullName, value);
			}
		}

		public virtual string s_Password
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Password) ? string.Empty : base.GetstringAsString(ColumnNames.Password);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Password);
				else
					this.Password = base.SetstringAsString(ColumnNames.Password, value);
			}
		}

		public virtual string s_JobTitle
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.JobTitle) ? string.Empty : base.GetintAsString(ColumnNames.JobTitle);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.JobTitle);
				else
					this.JobTitle = base.SetintAsString(ColumnNames.JobTitle, value);
			}
		}

		public virtual string s_NationalID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NationalID) ? string.Empty : base.GetstringAsString(ColumnNames.NationalID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NationalID);
				else
					this.NationalID = base.SetstringAsString(ColumnNames.NationalID, value);
			}
		}

		public virtual string s_MaritalStatus
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MaritalStatus) ? string.Empty : base.GetintAsString(ColumnNames.MaritalStatus);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MaritalStatus);
				else
					this.MaritalStatus = base.SetintAsString(ColumnNames.MaritalStatus, value);
			}
		}

		public virtual string s_CompanyEmail
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CompanyEmail) ? string.Empty : base.GetstringAsString(ColumnNames.CompanyEmail);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CompanyEmail);
				else
					this.CompanyEmail = base.SetstringAsString(ColumnNames.CompanyEmail, value);
			}
		}

		public virtual string s_MilitaryState
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.MilitaryState) ? string.Empty : base.GetintAsString(ColumnNames.MilitaryState);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.MilitaryState);
				else
					this.MilitaryState = base.SetintAsString(ColumnNames.MilitaryState, value);
			}
		}

		public virtual string s_WorkPhone
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.WorkPhone) ? string.Empty : base.GetlongAsString(ColumnNames.WorkPhone);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.WorkPhone);
				else
					this.WorkPhone = base.SetlongAsString(ColumnNames.WorkPhone, value);
			}
		}

		public virtual string s_ReportTo
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ReportTo) ? string.Empty : base.GetlongAsString(ColumnNames.ReportTo);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ReportTo);
				else
					this.ReportTo = base.SetlongAsString(ColumnNames.ReportTo, value);
			}
		}

		public virtual string s_CountryID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CountryID) ? string.Empty : base.GetintAsString(ColumnNames.CountryID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CountryID);
				else
					this.CountryID = base.SetintAsString(ColumnNames.CountryID, value);
			}
		}

		public virtual string s_CityID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CityID) ? string.Empty : base.GetintAsString(ColumnNames.CityID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CityID);
				else
					this.CityID = base.SetintAsString(ColumnNames.CityID, value);
			}
		}

		public virtual string s_RegionID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.RegionID) ? string.Empty : base.GetintAsString(ColumnNames.RegionID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.RegionID);
				else
					this.RegionID = base.SetintAsString(ColumnNames.RegionID, value);
			}
		}

		public virtual string s_Street
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Street) ? string.Empty : base.GetstringAsString(ColumnNames.Street);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Street);
				else
					this.Street = base.SetstringAsString(ColumnNames.Street, value);
			}
		}

		public virtual string s_BuildingNumber
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BuildingNumber) ? string.Empty : base.GetstringAsString(ColumnNames.BuildingNumber);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BuildingNumber);
				else
					this.BuildingNumber = base.SetstringAsString(ColumnNames.BuildingNumber, value);
			}
		}

		public virtual string s_Floor
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Floor) ? string.Empty : base.GetstringAsString(ColumnNames.Floor);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Floor);
				else
					this.Floor = base.SetstringAsString(ColumnNames.Floor, value);
			}
		}

		public virtual string s_AddressDescriotion
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.AddressDescriotion) ? string.Empty : base.GetstringAsString(ColumnNames.AddressDescriotion);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.AddressDescriotion);
				else
					this.AddressDescriotion = base.SetstringAsString(ColumnNames.AddressDescriotion, value);
			}
		}

		public virtual string s_CreationDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreationDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.CreationDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreationDate);
				else
					this.CreationDate = base.SetDateTimeAsString(ColumnNames.CreationDate, value);
			}
		}

		public virtual string s_CreatedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CreatedBy) ? string.Empty : base.GetlongAsString(ColumnNames.CreatedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CreatedBy);
				else
					this.CreatedBy = base.SetlongAsString(ColumnNames.CreatedBy, value);
			}
		}

		public virtual string s_ModifiedDate
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedDate) ? string.Empty : base.GetDateTimeAsString(ColumnNames.ModifiedDate);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedDate);
				else
					this.ModifiedDate = base.SetDateTimeAsString(ColumnNames.ModifiedDate, value);
			}
		}

		public virtual string s_ModifiedBy
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ModifiedBy) ? string.Empty : base.GetlongAsString(ColumnNames.ModifiedBy);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ModifiedBy);
				else
					this.ModifiedBy = base.SetlongAsString(ColumnNames.ModifiedBy, value);
			}
		}

		public virtual string s_Gender
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.Gender) ? string.Empty : base.GetstringAsString(ColumnNames.Gender);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.Gender);
				else
					this.Gender = base.SetstringAsString(ColumnNames.Gender, value);
			}
		}

		public virtual string s_BasicSalary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.BasicSalary) ? string.Empty : base.GetstringAsString(ColumnNames.BasicSalary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.BasicSalary);
				else
					this.BasicSalary = base.SetstringAsString(ColumnNames.BasicSalary, value);
			}
		}

		public virtual string s_VariantSalary
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VariantSalary) ? string.Empty : base.GetstringAsString(ColumnNames.VariantSalary);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VariantSalary);
				else
					this.VariantSalary = base.SetstringAsString(ColumnNames.VariantSalary, value);
			}
		}

		public virtual string s_PaymentStrategyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentStrategyID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentStrategyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentStrategyID);
				else
					this.PaymentStrategyID = base.SetintAsString(ColumnNames.PaymentStrategyID, value);
			}
		}

		public virtual string s_PaymentMethodID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PaymentMethodID) ? string.Empty : base.GetintAsString(ColumnNames.PaymentMethodID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PaymentMethodID);
				else
					this.PaymentMethodID = base.SetintAsString(ColumnNames.PaymentMethodID, value);
			}
		}

		public virtual string s_TotalGross
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalGross) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalGross);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalGross);
				else
					this.TotalGross = base.SetdoubleAsString(ColumnNames.TotalGross, value);
			}
		}

		public virtual string s_TotalNet
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalNet) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalNet);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalNet);
				else
					this.TotalNet = base.SetdoubleAsString(ColumnNames.TotalNet, value);
			}
		}

		public virtual string s_TotalIncome
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TotalIncome) ? string.Empty : base.GetdoubleAsString(ColumnNames.TotalIncome);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TotalIncome);
				else
					this.TotalIncome = base.SetdoubleAsString(ColumnNames.TotalIncome, value);
			}
		}

		public virtual string s_CurrencyID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CurrencyID) ? string.Empty : base.GetintAsString(ColumnNames.CurrencyID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CurrencyID);
				else
					this.CurrencyID = base.SetintAsString(ColumnNames.CurrencyID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FirstName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MiddleName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter LastName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FullName
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Password
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter JobTitle
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Photo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Photo, Parameters.Photo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NationalID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NationalID, Parameters.NationalID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MaritalStatus
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MaritalStatus, Parameters.MaritalStatus);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CompanyEmail
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CompanyEmail, Parameters.CompanyEmail);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter MilitaryState
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.MilitaryState, Parameters.MilitaryState);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter WorkPhone
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.WorkPhone, Parameters.WorkPhone);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ReportTo
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ReportTo, Parameters.ReportTo);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CountryID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CityID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter RegionID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.RegionID, Parameters.RegionID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Street
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Street, Parameters.Street);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BuildingNumber
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BuildingNumber, Parameters.BuildingNumber);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Floor
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Floor, Parameters.Floor);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter AddressDescriotion
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.AddressDescriotion, Parameters.AddressDescriotion);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreationDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CreatedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedDate
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ModifiedBy
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter Gender
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.Gender, Parameters.Gender);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter BasicSalary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.BasicSalary, Parameters.BasicSalary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VariantSalary
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VariantSalary, Parameters.VariantSalary);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentStrategyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentStrategyID, Parameters.PaymentStrategyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PaymentMethodID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PaymentMethodID, Parameters.PaymentMethodID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalGross
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalGross, Parameters.TotalGross);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalNet
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalNet, Parameters.TotalNet);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TotalIncome
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TotalIncome, Parameters.TotalIncome);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CurrencyID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CurrencyID, Parameters.CurrencyID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public WhereParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public WhereParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public WhereParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public WhereParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public WhereParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public WhereParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public WhereParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public WhereParameter NationalID
		    {
				get
		        {
					if(_NationalID_W == null)
	        	    {
						_NationalID_W = TearOff.NationalID;
					}
					return _NationalID_W;
				}
			}

			public WhereParameter MaritalStatus
		    {
				get
		        {
					if(_MaritalStatus_W == null)
	        	    {
						_MaritalStatus_W = TearOff.MaritalStatus;
					}
					return _MaritalStatus_W;
				}
			}

			public WhereParameter CompanyEmail
		    {
				get
		        {
					if(_CompanyEmail_W == null)
	        	    {
						_CompanyEmail_W = TearOff.CompanyEmail;
					}
					return _CompanyEmail_W;
				}
			}

			public WhereParameter MilitaryState
		    {
				get
		        {
					if(_MilitaryState_W == null)
	        	    {
						_MilitaryState_W = TearOff.MilitaryState;
					}
					return _MilitaryState_W;
				}
			}

			public WhereParameter WorkPhone
		    {
				get
		        {
					if(_WorkPhone_W == null)
	        	    {
						_WorkPhone_W = TearOff.WorkPhone;
					}
					return _WorkPhone_W;
				}
			}

			public WhereParameter ReportTo
		    {
				get
		        {
					if(_ReportTo_W == null)
	        	    {
						_ReportTo_W = TearOff.ReportTo;
					}
					return _ReportTo_W;
				}
			}

			public WhereParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public WhereParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public WhereParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			public WhereParameter Street
		    {
				get
		        {
					if(_Street_W == null)
	        	    {
						_Street_W = TearOff.Street;
					}
					return _Street_W;
				}
			}

			public WhereParameter BuildingNumber
		    {
				get
		        {
					if(_BuildingNumber_W == null)
	        	    {
						_BuildingNumber_W = TearOff.BuildingNumber;
					}
					return _BuildingNumber_W;
				}
			}

			public WhereParameter Floor
		    {
				get
		        {
					if(_Floor_W == null)
	        	    {
						_Floor_W = TearOff.Floor;
					}
					return _Floor_W;
				}
			}

			public WhereParameter AddressDescriotion
		    {
				get
		        {
					if(_AddressDescriotion_W == null)
	        	    {
						_AddressDescriotion_W = TearOff.AddressDescriotion;
					}
					return _AddressDescriotion_W;
				}
			}

			public WhereParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public WhereParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public WhereParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public WhereParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public WhereParameter Gender
		    {
				get
		        {
					if(_Gender_W == null)
	        	    {
						_Gender_W = TearOff.Gender;
					}
					return _Gender_W;
				}
			}

			public WhereParameter BasicSalary
		    {
				get
		        {
					if(_BasicSalary_W == null)
	        	    {
						_BasicSalary_W = TearOff.BasicSalary;
					}
					return _BasicSalary_W;
				}
			}

			public WhereParameter VariantSalary
		    {
				get
		        {
					if(_VariantSalary_W == null)
	        	    {
						_VariantSalary_W = TearOff.VariantSalary;
					}
					return _VariantSalary_W;
				}
			}

			public WhereParameter PaymentStrategyID
		    {
				get
		        {
					if(_PaymentStrategyID_W == null)
	        	    {
						_PaymentStrategyID_W = TearOff.PaymentStrategyID;
					}
					return _PaymentStrategyID_W;
				}
			}

			public WhereParameter PaymentMethodID
		    {
				get
		        {
					if(_PaymentMethodID_W == null)
	        	    {
						_PaymentMethodID_W = TearOff.PaymentMethodID;
					}
					return _PaymentMethodID_W;
				}
			}

			public WhereParameter TotalGross
		    {
				get
		        {
					if(_TotalGross_W == null)
	        	    {
						_TotalGross_W = TearOff.TotalGross;
					}
					return _TotalGross_W;
				}
			}

			public WhereParameter TotalNet
		    {
				get
		        {
					if(_TotalNet_W == null)
	        	    {
						_TotalNet_W = TearOff.TotalNet;
					}
					return _TotalNet_W;
				}
			}

			public WhereParameter TotalIncome
		    {
				get
		        {
					if(_TotalIncome_W == null)
	        	    {
						_TotalIncome_W = TearOff.TotalIncome;
					}
					return _TotalIncome_W;
				}
			}

			public WhereParameter CurrencyID
		    {
				get
		        {
					if(_CurrencyID_W == null)
	        	    {
						_CurrencyID_W = TearOff.CurrencyID;
					}
					return _CurrencyID_W;
				}
			}

			private WhereParameter _ID_W = null;
			private WhereParameter _FirstName_W = null;
			private WhereParameter _MiddleName_W = null;
			private WhereParameter _LastName_W = null;
			private WhereParameter _FullName_W = null;
			private WhereParameter _Password_W = null;
			private WhereParameter _JobTitle_W = null;
			private WhereParameter _Photo_W = null;
			private WhereParameter _NationalID_W = null;
			private WhereParameter _MaritalStatus_W = null;
			private WhereParameter _CompanyEmail_W = null;
			private WhereParameter _MilitaryState_W = null;
			private WhereParameter _WorkPhone_W = null;
			private WhereParameter _ReportTo_W = null;
			private WhereParameter _CountryID_W = null;
			private WhereParameter _CityID_W = null;
			private WhereParameter _RegionID_W = null;
			private WhereParameter _Street_W = null;
			private WhereParameter _BuildingNumber_W = null;
			private WhereParameter _Floor_W = null;
			private WhereParameter _AddressDescriotion_W = null;
			private WhereParameter _CreationDate_W = null;
			private WhereParameter _CreatedBy_W = null;
			private WhereParameter _ModifiedDate_W = null;
			private WhereParameter _ModifiedBy_W = null;
			private WhereParameter _Gender_W = null;
			private WhereParameter _BasicSalary_W = null;
			private WhereParameter _VariantSalary_W = null;
			private WhereParameter _PaymentStrategyID_W = null;
			private WhereParameter _PaymentMethodID_W = null;
			private WhereParameter _TotalGross_W = null;
			private WhereParameter _TotalNet_W = null;
			private WhereParameter _TotalIncome_W = null;
			private WhereParameter _CurrencyID_W = null;

			public void WhereClauseReset()
			{
				_ID_W = null;
				_FirstName_W = null;
				_MiddleName_W = null;
				_LastName_W = null;
				_FullName_W = null;
				_Password_W = null;
				_JobTitle_W = null;
				_Photo_W = null;
				_NationalID_W = null;
				_MaritalStatus_W = null;
				_CompanyEmail_W = null;
				_MilitaryState_W = null;
				_WorkPhone_W = null;
				_ReportTo_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_RegionID_W = null;
				_Street_W = null;
				_BuildingNumber_W = null;
				_Floor_W = null;
				_AddressDescriotion_W = null;
				_CreationDate_W = null;
				_CreatedBy_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_Gender_W = null;
				_BasicSalary_W = null;
				_VariantSalary_W = null;
				_PaymentStrategyID_W = null;
				_PaymentMethodID_W = null;
				_TotalGross_W = null;
				_TotalNet_W = null;
				_TotalIncome_W = null;
				_CurrencyID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ID, Parameters.ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FirstName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FirstName, Parameters.FirstName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MiddleName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MiddleName, Parameters.MiddleName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter LastName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.LastName, Parameters.LastName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FullName
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FullName, Parameters.FullName);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Password
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Password, Parameters.Password);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter JobTitle
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.JobTitle, Parameters.JobTitle);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Photo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Photo, Parameters.Photo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NationalID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NationalID, Parameters.NationalID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MaritalStatus
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MaritalStatus, Parameters.MaritalStatus);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CompanyEmail
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CompanyEmail, Parameters.CompanyEmail);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter MilitaryState
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.MilitaryState, Parameters.MilitaryState);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter WorkPhone
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.WorkPhone, Parameters.WorkPhone);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ReportTo
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ReportTo, Parameters.ReportTo);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CountryID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CountryID, Parameters.CountryID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CityID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CityID, Parameters.CityID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter RegionID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.RegionID, Parameters.RegionID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Street
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Street, Parameters.Street);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BuildingNumber
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BuildingNumber, Parameters.BuildingNumber);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Floor
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Floor, Parameters.Floor);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter AddressDescriotion
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.AddressDescriotion, Parameters.AddressDescriotion);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreationDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreationDate, Parameters.CreationDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CreatedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CreatedBy, Parameters.CreatedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedDate
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedDate, Parameters.ModifiedDate);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ModifiedBy
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ModifiedBy, Parameters.ModifiedBy);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter Gender
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.Gender, Parameters.Gender);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter BasicSalary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.BasicSalary, Parameters.BasicSalary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VariantSalary
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VariantSalary, Parameters.VariantSalary);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentStrategyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentStrategyID, Parameters.PaymentStrategyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PaymentMethodID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PaymentMethodID, Parameters.PaymentMethodID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalGross
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalGross, Parameters.TotalGross);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalNet
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalNet, Parameters.TotalNet);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TotalIncome
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TotalIncome, Parameters.TotalIncome);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CurrencyID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CurrencyID, Parameters.CurrencyID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter ID
		    {
				get
		        {
					if(_ID_W == null)
	        	    {
						_ID_W = TearOff.ID;
					}
					return _ID_W;
				}
			}

			public AggregateParameter FirstName
		    {
				get
		        {
					if(_FirstName_W == null)
	        	    {
						_FirstName_W = TearOff.FirstName;
					}
					return _FirstName_W;
				}
			}

			public AggregateParameter MiddleName
		    {
				get
		        {
					if(_MiddleName_W == null)
	        	    {
						_MiddleName_W = TearOff.MiddleName;
					}
					return _MiddleName_W;
				}
			}

			public AggregateParameter LastName
		    {
				get
		        {
					if(_LastName_W == null)
	        	    {
						_LastName_W = TearOff.LastName;
					}
					return _LastName_W;
				}
			}

			public AggregateParameter FullName
		    {
				get
		        {
					if(_FullName_W == null)
	        	    {
						_FullName_W = TearOff.FullName;
					}
					return _FullName_W;
				}
			}

			public AggregateParameter Password
		    {
				get
		        {
					if(_Password_W == null)
	        	    {
						_Password_W = TearOff.Password;
					}
					return _Password_W;
				}
			}

			public AggregateParameter JobTitle
		    {
				get
		        {
					if(_JobTitle_W == null)
	        	    {
						_JobTitle_W = TearOff.JobTitle;
					}
					return _JobTitle_W;
				}
			}

			public AggregateParameter Photo
		    {
				get
		        {
					if(_Photo_W == null)
	        	    {
						_Photo_W = TearOff.Photo;
					}
					return _Photo_W;
				}
			}

			public AggregateParameter NationalID
		    {
				get
		        {
					if(_NationalID_W == null)
	        	    {
						_NationalID_W = TearOff.NationalID;
					}
					return _NationalID_W;
				}
			}

			public AggregateParameter MaritalStatus
		    {
				get
		        {
					if(_MaritalStatus_W == null)
	        	    {
						_MaritalStatus_W = TearOff.MaritalStatus;
					}
					return _MaritalStatus_W;
				}
			}

			public AggregateParameter CompanyEmail
		    {
				get
		        {
					if(_CompanyEmail_W == null)
	        	    {
						_CompanyEmail_W = TearOff.CompanyEmail;
					}
					return _CompanyEmail_W;
				}
			}

			public AggregateParameter MilitaryState
		    {
				get
		        {
					if(_MilitaryState_W == null)
	        	    {
						_MilitaryState_W = TearOff.MilitaryState;
					}
					return _MilitaryState_W;
				}
			}

			public AggregateParameter WorkPhone
		    {
				get
		        {
					if(_WorkPhone_W == null)
	        	    {
						_WorkPhone_W = TearOff.WorkPhone;
					}
					return _WorkPhone_W;
				}
			}

			public AggregateParameter ReportTo
		    {
				get
		        {
					if(_ReportTo_W == null)
	        	    {
						_ReportTo_W = TearOff.ReportTo;
					}
					return _ReportTo_W;
				}
			}

			public AggregateParameter CountryID
		    {
				get
		        {
					if(_CountryID_W == null)
	        	    {
						_CountryID_W = TearOff.CountryID;
					}
					return _CountryID_W;
				}
			}

			public AggregateParameter CityID
		    {
				get
		        {
					if(_CityID_W == null)
	        	    {
						_CityID_W = TearOff.CityID;
					}
					return _CityID_W;
				}
			}

			public AggregateParameter RegionID
		    {
				get
		        {
					if(_RegionID_W == null)
	        	    {
						_RegionID_W = TearOff.RegionID;
					}
					return _RegionID_W;
				}
			}

			public AggregateParameter Street
		    {
				get
		        {
					if(_Street_W == null)
	        	    {
						_Street_W = TearOff.Street;
					}
					return _Street_W;
				}
			}

			public AggregateParameter BuildingNumber
		    {
				get
		        {
					if(_BuildingNumber_W == null)
	        	    {
						_BuildingNumber_W = TearOff.BuildingNumber;
					}
					return _BuildingNumber_W;
				}
			}

			public AggregateParameter Floor
		    {
				get
		        {
					if(_Floor_W == null)
	        	    {
						_Floor_W = TearOff.Floor;
					}
					return _Floor_W;
				}
			}

			public AggregateParameter AddressDescriotion
		    {
				get
		        {
					if(_AddressDescriotion_W == null)
	        	    {
						_AddressDescriotion_W = TearOff.AddressDescriotion;
					}
					return _AddressDescriotion_W;
				}
			}

			public AggregateParameter CreationDate
		    {
				get
		        {
					if(_CreationDate_W == null)
	        	    {
						_CreationDate_W = TearOff.CreationDate;
					}
					return _CreationDate_W;
				}
			}

			public AggregateParameter CreatedBy
		    {
				get
		        {
					if(_CreatedBy_W == null)
	        	    {
						_CreatedBy_W = TearOff.CreatedBy;
					}
					return _CreatedBy_W;
				}
			}

			public AggregateParameter ModifiedDate
		    {
				get
		        {
					if(_ModifiedDate_W == null)
	        	    {
						_ModifiedDate_W = TearOff.ModifiedDate;
					}
					return _ModifiedDate_W;
				}
			}

			public AggregateParameter ModifiedBy
		    {
				get
		        {
					if(_ModifiedBy_W == null)
	        	    {
						_ModifiedBy_W = TearOff.ModifiedBy;
					}
					return _ModifiedBy_W;
				}
			}

			public AggregateParameter Gender
		    {
				get
		        {
					if(_Gender_W == null)
	        	    {
						_Gender_W = TearOff.Gender;
					}
					return _Gender_W;
				}
			}

			public AggregateParameter BasicSalary
		    {
				get
		        {
					if(_BasicSalary_W == null)
	        	    {
						_BasicSalary_W = TearOff.BasicSalary;
					}
					return _BasicSalary_W;
				}
			}

			public AggregateParameter VariantSalary
		    {
				get
		        {
					if(_VariantSalary_W == null)
	        	    {
						_VariantSalary_W = TearOff.VariantSalary;
					}
					return _VariantSalary_W;
				}
			}

			public AggregateParameter PaymentStrategyID
		    {
				get
		        {
					if(_PaymentStrategyID_W == null)
	        	    {
						_PaymentStrategyID_W = TearOff.PaymentStrategyID;
					}
					return _PaymentStrategyID_W;
				}
			}

			public AggregateParameter PaymentMethodID
		    {
				get
		        {
					if(_PaymentMethodID_W == null)
	        	    {
						_PaymentMethodID_W = TearOff.PaymentMethodID;
					}
					return _PaymentMethodID_W;
				}
			}

			public AggregateParameter TotalGross
		    {
				get
		        {
					if(_TotalGross_W == null)
	        	    {
						_TotalGross_W = TearOff.TotalGross;
					}
					return _TotalGross_W;
				}
			}

			public AggregateParameter TotalNet
		    {
				get
		        {
					if(_TotalNet_W == null)
	        	    {
						_TotalNet_W = TearOff.TotalNet;
					}
					return _TotalNet_W;
				}
			}

			public AggregateParameter TotalIncome
		    {
				get
		        {
					if(_TotalIncome_W == null)
	        	    {
						_TotalIncome_W = TearOff.TotalIncome;
					}
					return _TotalIncome_W;
				}
			}

			public AggregateParameter CurrencyID
		    {
				get
		        {
					if(_CurrencyID_W == null)
	        	    {
						_CurrencyID_W = TearOff.CurrencyID;
					}
					return _CurrencyID_W;
				}
			}

			private AggregateParameter _ID_W = null;
			private AggregateParameter _FirstName_W = null;
			private AggregateParameter _MiddleName_W = null;
			private AggregateParameter _LastName_W = null;
			private AggregateParameter _FullName_W = null;
			private AggregateParameter _Password_W = null;
			private AggregateParameter _JobTitle_W = null;
			private AggregateParameter _Photo_W = null;
			private AggregateParameter _NationalID_W = null;
			private AggregateParameter _MaritalStatus_W = null;
			private AggregateParameter _CompanyEmail_W = null;
			private AggregateParameter _MilitaryState_W = null;
			private AggregateParameter _WorkPhone_W = null;
			private AggregateParameter _ReportTo_W = null;
			private AggregateParameter _CountryID_W = null;
			private AggregateParameter _CityID_W = null;
			private AggregateParameter _RegionID_W = null;
			private AggregateParameter _Street_W = null;
			private AggregateParameter _BuildingNumber_W = null;
			private AggregateParameter _Floor_W = null;
			private AggregateParameter _AddressDescriotion_W = null;
			private AggregateParameter _CreationDate_W = null;
			private AggregateParameter _CreatedBy_W = null;
			private AggregateParameter _ModifiedDate_W = null;
			private AggregateParameter _ModifiedBy_W = null;
			private AggregateParameter _Gender_W = null;
			private AggregateParameter _BasicSalary_W = null;
			private AggregateParameter _VariantSalary_W = null;
			private AggregateParameter _PaymentStrategyID_W = null;
			private AggregateParameter _PaymentMethodID_W = null;
			private AggregateParameter _TotalGross_W = null;
			private AggregateParameter _TotalNet_W = null;
			private AggregateParameter _TotalIncome_W = null;
			private AggregateParameter _CurrencyID_W = null;

			public void AggregateClauseReset()
			{
				_ID_W = null;
				_FirstName_W = null;
				_MiddleName_W = null;
				_LastName_W = null;
				_FullName_W = null;
				_Password_W = null;
				_JobTitle_W = null;
				_Photo_W = null;
				_NationalID_W = null;
				_MaritalStatus_W = null;
				_CompanyEmail_W = null;
				_MilitaryState_W = null;
				_WorkPhone_W = null;
				_ReportTo_W = null;
				_CountryID_W = null;
				_CityID_W = null;
				_RegionID_W = null;
				_Street_W = null;
				_BuildingNumber_W = null;
				_Floor_W = null;
				_AddressDescriotion_W = null;
				_CreationDate_W = null;
				_CreatedBy_W = null;
				_ModifiedDate_W = null;
				_ModifiedBy_W = null;
				_Gender_W = null;
				_BasicSalary_W = null;
				_VariantSalary_W = null;
				_PaymentStrategyID_W = null;
				_PaymentMethodID_W = null;
				_TotalGross_W = null;
				_TotalNet_W = null;
				_TotalIncome_W = null;
				_CurrencyID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserInsert]";
	
			CreateParameters(cmd);
			    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserUpdate]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_UserDelete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.ID);
			p.SourceColumn = ColumnNames.ID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FirstName);
			p.SourceColumn = ColumnNames.FirstName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MiddleName);
			p.SourceColumn = ColumnNames.MiddleName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.LastName);
			p.SourceColumn = ColumnNames.LastName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FullName);
			p.SourceColumn = ColumnNames.FullName;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Password);
			p.SourceColumn = ColumnNames.Password;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.JobTitle);
			p.SourceColumn = ColumnNames.JobTitle;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Photo);
			p.SourceColumn = ColumnNames.Photo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NationalID);
			p.SourceColumn = ColumnNames.NationalID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MaritalStatus);
			p.SourceColumn = ColumnNames.MaritalStatus;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CompanyEmail);
			p.SourceColumn = ColumnNames.CompanyEmail;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.MilitaryState);
			p.SourceColumn = ColumnNames.MilitaryState;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.WorkPhone);
			p.SourceColumn = ColumnNames.WorkPhone;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ReportTo);
			p.SourceColumn = ColumnNames.ReportTo;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CountryID);
			p.SourceColumn = ColumnNames.CountryID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CityID);
			p.SourceColumn = ColumnNames.CityID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.RegionID);
			p.SourceColumn = ColumnNames.RegionID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Street);
			p.SourceColumn = ColumnNames.Street;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BuildingNumber);
			p.SourceColumn = ColumnNames.BuildingNumber;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Floor);
			p.SourceColumn = ColumnNames.Floor;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.AddressDescriotion);
			p.SourceColumn = ColumnNames.AddressDescriotion;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreationDate);
			p.SourceColumn = ColumnNames.CreationDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CreatedBy);
			p.SourceColumn = ColumnNames.CreatedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedDate);
			p.SourceColumn = ColumnNames.ModifiedDate;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ModifiedBy);
			p.SourceColumn = ColumnNames.ModifiedBy;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.Gender);
			p.SourceColumn = ColumnNames.Gender;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.BasicSalary);
			p.SourceColumn = ColumnNames.BasicSalary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VariantSalary);
			p.SourceColumn = ColumnNames.VariantSalary;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentStrategyID);
			p.SourceColumn = ColumnNames.PaymentStrategyID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PaymentMethodID);
			p.SourceColumn = ColumnNames.PaymentMethodID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalGross);
			p.SourceColumn = ColumnNames.TotalGross;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalNet);
			p.SourceColumn = ColumnNames.TotalNet;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TotalIncome);
			p.SourceColumn = ColumnNames.TotalIncome;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CurrencyID);
			p.SourceColumn = ColumnNames.CurrencyID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
